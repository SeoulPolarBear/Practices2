# 앞으로 공부할 내용
# 1. 뷰페이지 템플리 꾸미기(Form) -> 입력과 출력
# 2. 템플릿 파일의 목적(용도)
# 3. 관리자모드에서의 DB 조작
# 관리자모드에서의 DB조작 VS CMD 명령프롬프트에서의 DB조작(dbshell)
#           - 이 과정에서 오류가 발생하곤 한다 -> 이때 -> 어떻게 처리해줘야 하는지에 대해서 체크.
#           - sqlite tool설치가 안되서 나는 오류.
#           - https://www.sqlite.org/download.html여기서 관련 툴을 다운로드.
#           - sql-tools-win32-x86-....zip (1.8 ~ 2M)
#           - 앞축을 풀면 3개의 실행파일이 들어있는데 이중 sqlite3.exe실행파일을 생성한 프로젝트 루트 폴더에 넣어놓고
#           - sqlite DB에 접속하면 됩니다.
#           - 툴을 통해 DB의 테이블 정보 확인 및 테이블명 규칙성 확인 -> 실제 테이블명 확인.

# 4. 꾸민 폼 페이지에서 한 줄 메모 작성 -> DB에 입력 및 출력



sqllit3를 설치하지 않은 상태면
CommandError: You appear not to have the 'sqlite3' program installed or on your path.
이런 문구가 뜬다.



sqlite3를 copy 한다음에 
py manage.py dbshell
입력하면 이제 db로 접속이 가능한다.


select * from memo;
// 이런 table이 없다고 한다. 이유는 app이름_table이름 이렇게 실제로 sqlite3에 저장되기 때문이다.


----------
전체 table 확인하기
.table

select * from onememos_memo



CSRF token이란?
Cross Site Request Forgery(fake)= 위조
:가짜 요청 크로스 사이트
마치 정상 사용자(위조해서)처럼 공격을 하는 형태의 공격 이를 확인하기 위해서 token을 전송을 해야한다.

특정 사용자가 마치 접속하여 요청값을 보낸 것처럼 글 작성.
즉, 위조된 요청 액션을 보내 악의적으로 요청을 이용하는 행위.
예를들면, iframe등을 몰래 삽입하여 로그인한 상요자가 본인도 모르게 글 작성을 요청넣는 것처럼 하는 행위

장도 대비책:
	방법은 여러 가지 방법이 있음. 장고에서는 가장 편리하게 -> 토큰 이용.
	장고 프레임워크에서는 이러한 CSRF 공격에 대한 방어로 -> csrf_token을 이용.
	csrf_token 발급은 값이 매번 변경 -> 전송된 토큰을 통해 -> 뷰가 호출되기 전 유효성 검증.
	POST 방식을 사용하는 템플릿 form 태그쪽에 {%csrf_toekn%} -> 템플릿 태그 사용


<form action="http://127.0.0.1:8000/onememos/createMemo/" 
	method="POST" id="memoWriteForm"
	>
<input type="hidden" name="csrfmiddlewaretoken" value="cgDaoHjsZ3GHZl5OV8dbg0OtfVBT6kud2ll7WQG0jfUCEdo48Y14kWt4a6nSpqKB">
csrf를 넣으면 알아서 위 처럼 input을 hidden으로 하여서 만들어진다.

